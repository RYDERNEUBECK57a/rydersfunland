# This is a basic workflow to help you get started with Actions

name: CIimport pygame
import random

# Initialize pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 200, 0)
RED = (200, 0, 0)

# Game settings
FPS = 60
GRAVITY = 0.5
FLAP_STRENGTH = -10
PIPE_SPEED = -5
PIPE_GAP = 150

# Initialize screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Flappy Bird")

# Load assets
bird_img = pygame.Surface((30, 30))
bird_img.fill(GREEN)
pipe_img = pygame.Surface((50, SCREEN_HEIGHT))
pipe_img.fill(RED)

# Bird class
class Bird:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.velocity = 0
        self.rect = pygame.Rect(self.x, self.y, 30, 30)

    def update(self):
        self.velocity += GRAVITY
        self.y += self.velocity
        self.rect.y = self.y

    def flap(self):
        self.velocity = FLAP_STRENGTH

    def draw(self):
        screen.blit(bird_img, (self.x, self.y))

# Pipe class
class Pipe:
    def __init__(self, x):
        self.x = x
        self.height = random.randint(100, SCREEN_HEIGHT - PIPE_GAP - 100)
        self.top_rect = pygame.Rect(self.x, 0, 50, self.height)
        self.bottom_rect = pygame.Rect(self.x, self.height + PIPE_GAP, 50, SCREEN_HEIGHT - self.height - PIPE_GAP)

    def update(self):
        self.x += PIPE_SPEED
        self.top_rect.x = self.x
        self.bottom_rect.x = self.x

    def draw(self):
        screen.blit(pipe_img, self.top_rect)
        screen.blit(pipe_img, self.bottom_rect)

    def is_off_screen(self):
        return self.x + 50 < 0

# Game loop
clock = pygame.time.Clock()
bird = Bird(100, SCREEN_HEIGHT // 2)
pipes = [Pipe(SCREEN_WIDTH)]
score = 0
running = True

while running:
    screen.fill(WHITE)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            bird.flap()

    # Update bird
    bird.update()

    # Update pipes
    for pipe in pipes:
        pipe.update()
        if pipe.is_off_screen():
            pipes.remove(pipe)
            pipes.append(Pipe(SCREEN_WIDTH))
            score += 1

    # Collision detection
    for pipe in pipes:
        if bird.rect.colliderect(pipe.top_rect) or bird.rect.colliderect(pipe.bottom_rect):
            running = False

    if bird.y > SCREEN_HEIGHT or bird.y < 0:
        running = False

    # Draw bird and pipes
    bird.draw()
    for pipe in pipes:
        pipe.draw()

    # Display score
    font = pygame.font.SysFont(None, 36)
    score_text = font.render(f"Score: {score}", True, BLACK)
    screen.blit(score_text, (10, 10))

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |import pygame
import random

# Initialize pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 200, 0)
RED = (200, 0, 0)

# Game settings
FPS = 60
GRAVITY = 0.5
FLAP_STRENGTH = -10
PIPE_SPEED = -5
PIPE_GAP = 150

# Initialize screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Flappy Bird")

# Load assets
bird_img = pygame.Surface((30, 30))
bird_img.fill(GREEN)
pipe_img = pygame.Surface((50, SCREEN_HEIGHT))
pipe_img.fill(RED)

# Bird class
class Bird:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.velocity = 0
        self.rect = pygame.Rect(self.x, self.y, 30, 30)

    def update(self):
        self.velocity += GRAVITY
        self.y += self.velocity
        self.rect.y = self.y

    def flap(self):
        self.velocity = FLAP_STRENGTH

    def draw(self):
        screen.blit(bird_img, (self.x, self.y))

# Pipe class
class Pipe:
    def __init__(self, x):
        self.x = x
        self.height = random.randint(100, SCREEN_HEIGHT - PIPE_GAP - 100)
        self.top_rect = pygame.Rect(self.x, 0, 50, self.height)
        self.bottom_rect = pygame.Rect(self.x, self.height + PIPE_GAP, 50, SCREEN_HEIGHT - self.height - PIPE_GAP)

    def update(self):
        self.x += PIPE_SPEED
        self.top_rect.x = self.x
        self.bottom_rect.x = self.x

    def draw(self):
        screen.blit(pipe_img, self.top_rect)
        screen.blit(pipe_img, self.bottom_rect)

    def is_off_screen(self):
        return self.x + 50 < 0

# Game loop
clock = pygame.time.Clock()
bird = Bird(100, SCREEN_HEIGHT // 2)
pipes = [Pipe(SCREEN_WIDTH)]
score = 0
running = True

while running:
    screen.fill(WHITE)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            bird.flap()

    # Update bird
    bird.update()

    # Update pipes
    for pipe in pipes:
        pipe.update()
        if pipe.is_off_screen():
            pipes.remove(pipe)
            pipes.append(Pipe(SCREEN_WIDTH))
            score += 1

    # Collision detection
    for pipe in pipes:
        if bird.rect.colliderect(pipe.top_rect) or bird.rect.colliderect(pipe.bottom_rect):
            running = False

    if bird.y > SCREEN_HEIGHT or bird.y < 0:
        running = False

    # Draw bird and pipes
    bird.draw()
    for pipe in pipes:
        pipe.draw()

    # Display score
    font = pygame.font.SysFont(None, 36)
    score_text = font.render(f"Score: {score}", True, BLACK)
    screen.blit(score_text, (10, 10))

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
          echo Add other actions to build,
          echo test, and deploy your project.
